from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from io import BytesIO
from csv import writer
from fpdf import FPDF
from logger.logger import Logger
from schemas.schema import RegistroSchema   
from marshmallow import ValidationError

app = Flask(__name__)
CORS(app)
logger = Logger()

@app.route("/api/v1/generar-csv", methods=["POST"])
def generar_csv():
    try:
        data = request.get_json()
        RegistroSchema().load(data)

        logger.debug(f"Datos {data}")

        output = BytesIO()
        csv_writer = writer(output)
        header = ["Nombre", "Correo", "Puesto", "ID", "Extensión"]
        csv_writer.writerow(header)
        row = [
            data.get("nombre"),
            data.get("correo"),
            data.get("puesto"),
            data.get("id"),
            data.get("extension"),
        ]
        csv_writer.writerow(row)
        output.seek(0)
        return send_file(
            output,
            mimetype="text/csv",
            download_name="registro.csv",
            as_attachment=True,
        )
    except ValidationError as err:
        logger.error(f"Error de validación: {err.messages}")
        return jsonify({"error": "Datos inválidos", "details": err.messages}), 400
    except Exception as e:
        logger.error(f"Error generando CSV: {e}")
        return jsonify({"error": "Error generando CSV"}), 500

@app.route("/api/v1/generar-pdf", methods=["POST"])
def generar_pdf():
    try:
        data = request.get_json()
        RegistroSchema().load(data)

        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        text = f"Nombre: {data.get('nombre')}\nCorreo: {data.get('correo')}\nPuesto: {data.get('puesto')}\nID: {data.get('id')}\nExtensión: {data.get('extension')}"
        pdf.multi_cell(0, 10, text) #Agregamos el texto al pdf.

        output = BytesIO()
        pdf.output(output)
        output.seek(0)
        return send_file(
            output,
            mimetype="application/pdf",
            download_name="registro.pdf",
            as_attachment=True,
        )
    except ValidationError as err:
        logger.error(f"Error de validación: {err.messages}")
        return jsonify({"error": "Datos inválidos", "details": err.messages}), 400
    except Exception as e:
        logger.error(f"Error generando PDF: {e}")
        return jsonify({"error": "Error generando PDF"}), 500
    
@app.route("/healthcheck", methods=["GET"])
def healthcheck():
    return jsonify({"status": "Up"}), 200

if __name__ == "__main__":
    app.run(debug=True, port=3001)